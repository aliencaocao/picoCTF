import gmpy2
from Crypto.Util.number import *


def Pollards_p_1(N):
    a = 2
    n = 2
    while True:
        a = pow(a, n, N)
        res = gmpy2.gcd(a - 1, N)
        if res != 1 and res != N:
            # print('n =', n)
            # print('p =', res)
            return res
        n += 1


e = 65537
# n = 29222318805723953222364721676971742125010275013769475052931110866161804592311478704202558432070416333016652737173410680850046303841324913457753412432441924630014118481199509615827682076668620735180973121854888138747609529257538627904659481150492796248172446925771672891206547140024349550690297694379707548611377653574875199634063794283884523278929551933457275755536773148453652715967987713619243300553073576552907002819158138000362956532390141327793449552478168371256441219909754289639162425342999800131237347337516220937684356551660979999107858446560008352662051402896190454972582776607229135971184196950141859941001
# c = 13010514034607141562990961854253226627861002586197069546517673323412890814300986383680712969614149724108883933042503584882393498362658843505851729286866283790092858236292468941447618685586044626835557550501768025500143708643761124780657643596818313492632174224213481474976505657558397107646891344842030474580610063358971205834520023889891001993067256944887210213458968081751388423730232468384293570413751860971226254102868209638538149347492509555974694589612690294866044434722108701736832130486843522518480112266062028569177405257376202037932064333801240849051995453092216261557259012463852052902773972960583171478005
n = '5bf9961e4bcfc88017e1a9a40958af5eae3b3ee3dcf25bce02e5d04858ba1754e13e86b78a098ea0025222336df6b692e14533dad7f478005b421d3287676843f9f49ffd7ebec1e8e43b96cde7cd28bd6fdf5747a4a075b5afa7da7a4e9a2ccb26342799965f3fb6e65e0bb9557c6f3a67568ccbfaaa7e3d6c5cb79dd2f9928111c3183bf58bd91412a0742bbfb3c5cebfb0b82825da0875c5ee3df208ce563f896d67287c8b9aad9943dd76e5eae1fc8abd473ec9f9e4f2b49b7897954ca77b8f00ed51949c7e4f1f09bd54b830058bd7f4da04e5228250ba062ec0e1d19fb48a05333aada60ecdfc8c62c15773ed7e077edba71621f6a6c10302cc9ed26ec9'
c = '2475123653f5a4b842e7ac76829e896450126f7175520929a35b6a4302788ceff1a605ed30f4d01c19226e09fc95d005c61320d3bbd55cfebbc775332067ac6056c1969282091856eaa44ccaf5738ac6409e865bbd1186d69f718abd2b3a1dd3dc933a07ca687f0af9385406fd9ee4fa5f701ad46f0852bf4370264c21f775f1e15283444b3bf45af29b84bb429ed5a17adc9af78aee8c5351434491d5daf9dd3ce3cf0cd44b307eb403f0e9f482dd001b25ed284c4e6c1ba2864e5a2c4b1afe4161426cc67203f30553c88d7132aef1337eca00622b47cb7a28195f0e3a2ab934e6163b2941a4631412e13b1a72fe34e6480fada9af4dae14f2608805d61ee'
n = int(n, 16)
c = int(c, 16)
n = 4966306421059967

p = Pollards_p_1(n)
q = n // p
assert p * q == n
print('p =', p)
print('q =', q)
d = gmpy2.invert(e, (p - 1) * (q - 1))
m = pow(c, d, n)
byt = long_to_bytes(m)
print(byt.decode('ascii', errors='ignore'))
